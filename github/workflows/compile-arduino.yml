name: Arduino Compilation

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  repository_dispatch:
    types: [compile-arduino]

jobs:
  compile:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Arduino CLI
      uses: arduino/setup-arduino-cli@v1
      with:
        version: '1.0.4'
    
    - name: Create sketch directory
      run: |
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          # For API calls - create sketch from payload
          SKETCH_NAME="${{ github.event.client_payload.filename }}"
          mkdir -p "sketches/${SKETCH_NAME}"
          # Use base64 encoding to handle special characters safely
          echo '${{ github.event.client_payload.code }}' | base64 -d > "sketches/${SKETCH_NAME}/${SKETCH_NAME}.ino"
        else
          # For push/PR events - use existing sketch files
          echo "Using existing sketch files in repository"
        fi
    
    - name: Update Arduino CLI core index
      run: arduino-cli core update-index --additional-urls https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
    
    - name: Install Arduino cores
      run: |
        arduino-cli core install arduino:avr
        arduino-cli core install esp32:esp32 --additional-urls https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
    
    - name: List available sketches
      run: |
        echo "Available sketches:"
        find . -name "*.ino" -type f
    
    - name: Compile sketch
      run: |
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          SKETCH_NAME="${{ github.event.client_payload.filename }}"
          FQBN="${{ github.event.client_payload.fqbn }}"
          SKETCH_PATH="sketches/${SKETCH_NAME}"
        else
          # Auto-detect sketch for push events
          SKETCH_FILE=$(find . -name "*.ino" -type f | head -1)
          if [ -z "$SKETCH_FILE" ]; then
            echo "No .ino files found in repository"
            exit 1
          fi
          SKETCH_PATH=$(dirname "$SKETCH_FILE")
          SKETCH_NAME=$(basename "$SKETCH_FILE" .ino)
          # Default FQBN - adjust as needed for your board
          FQBN="arduino:avr:uno"
        fi
        
        echo "Compiling sketch: $SKETCH_NAME"
        echo "FQBN: $FQBN"
        echo "Sketch path: $SKETCH_PATH"
        
        mkdir -p "builds/${SKETCH_NAME}"
        
        arduino-cli compile \
          --fqbn "$FQBN" \
          --output-dir "builds/${SKETCH_NAME}" \
          --verbose \
          --export-binaries \
          "$SKETCH_PATH"
    
    - name: List compiled files
      run: |
        echo "Compiled files:"
        find builds/ -type f
    
    - name: Upload hex files
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: arduino-firmware-${{ github.run_number }}
        path: |
          builds/**/*.hex
          builds/**/*.bin
          builds/**/*.elf
        retention-days: 30
    
    - name: Create release
      if: success() && github.event_name == 'push'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: build-${{ github.run_number }}
        name: Arduino Build ${{ github.run_number }}
        body: |
          ðŸ”§ **Arduino Firmware Build**
          
          - **Commit**: ${{ github.sha }}
          - **Branch**: ${{ github.ref_name }}
          - **Build Number**: ${{ github.run_number }}
          
          Download the firmware files from the artifacts below.
        files: |
          builds/**/*.hex
          builds/**/*.bin
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
